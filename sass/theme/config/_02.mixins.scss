/***
 * @file
 * MIXINS - See theme Readme for more details.
 */

/* MEDIA QUERIES */
@mixin mq($breakpoint) {
  @if (type-of($breakpoint) == string) {
    $breakpoint: map-deep-get($tokens, 'screen', $breakpoint);
  }
  @media (min-width: rem($breakpoint)) {
    @content;
  }
}

/* GRID */

//Grid Browser Compliance (requires parent element with `.grid`)
@mixin grid-column($start, $end) {
  $spanWidth: $end - $start;

  grid-column: #{$start} / #{$end};
  -ms-grid-column: #{$start} !important;
  -ms-grid-column-span: #{$spanWidth};
}

// Centers a column on the page
@mixin center-columns($centered-columns, $total-columns) {
  @if ($total-columns - $centered-columns == 0) {
    $total-columns: $total-columns + 1;
    @include grid-column(1, $total-columns);
  } @else {
    $position-left: ($total-columns - $centered-columns)/2 + 1;
    $position-right: $position-left + $centered-columns;
    @include grid-column(#{$position-left}, #{$position-right});
  }
}

// Gutter spacing w/ Grid
@mixin grid-equal-items($items-in-row) {
  @if ($items-in-row == 2) {
    $percent: calc(50% - (#{$gutter}/ 2));
    grid-template-columns: $percent $percent;
  } @else if ($items-in-row == 3) {
    $percent: calc(33.33% - (#{$gutter}/ 1.5));
    grid-template-columns: $percent $percent $percent;
  } @else if ($items-in-row == 4) {
    $percent: calc(25% - #{$gutter});
  } @else {
    $percent: 100%;
    grid-template-columns: $percent;
  }
}

/* FLEXBOX */

// Wrapper for a flex grid - the arguments set the justification and the
// starting breakpoint.
//
// Note: Use if needing to create a grid with items centered in the final row.
// In the case of left-aligned final row items, use grid-equal-items() above.
//
// flex-basis will need to be added to the items themselves. Ex. 25% for 4 across.
@mixin flex-grid-wrapper($justify: center, $bp-start: $sm) {
  @include margin-gutter(left, half, minus);
  @include margin-gutter(right, half, minus);
  @include mq($bp-start) {
    @include margin-gutter(left, half, minus);
    @include margin-gutter(right, half, minus);
    display: flex;
    flex-wrap: wrap;
    justify-content: $justify;
  }
  @content;
}

// Gutter spacing
@mixin margin-gutter($side: bottom, $half: false, $minus: false) {
  @if ($half == false) {
    @if ($minus == false) {
      margin-#{$side}: $gutter;
      @include mq($ph) {
        margin-#{$side}: $gutter;
      }
    } @else {
      margin-#{$side}: $gutter;
      @include mq($ph) {
        margin-#{$side}: ($gutter * -1);
      }
    }
  } @else {
    @if ($minus == false) {
      margin-#{$side}: ($gutter / 2);
      @include mq($ph) {
        margin-#{$side}: ($gutter / 2);
      }
    } @else {
      margin-#{$side}: (($gutter / 2) * -1);
      @include mq($ph) {
        margin-#{$side}: (($gutter / 2) * -1);
      }
    }
  }
}

//// Pass in "right, left, top or bottom" to add consistent padding; pass in 'half' to halve the padding.
@mixin padding-gutter($side: bottom, $half: false) {
  @if ($half == false) {
    padding-#{$side}: $gutter;
  } @else {
    padding-#{$side}: ($gutter / 2);
  }
}

// Each argument is items per row in each breakpoint
@mixin flex-grid-item(
  $sm-num: 1,
  $ph-num: 2,
  $md-num: 3,
  $sl-num: 3,
  $lg-num: 4,
  $xl-num: 4,
  $xxl-num: 4
) {
  $breakpoints: ($sm, $sm-num), ($ph, $ph-num), ($md, $md-num), ($lg, $lg-num),
    ($xl, $xl-num), ($xxl, $xxl-num);

  // Default styles
  @include padding-gutter(left, half);
  @include padding-gutter(right, half);
  box-sizing: border-box;

  @each $bp, $bp-num in $breakpoints {
    @include mq($bp) {
      @if ($bp-num > 0) {
        flex: 0 0 (100% / $bp-num);
        max-width: (100% / $bp-num);
      }
    }
  }
  @content;
}

/* DECORATIVE ELEMENTS */

// Background Images
@mixin bg_image_setup {
  background-position: center;
  background-repeat: no-repeat;
  background-size: cover;
}

// Gradients & Overlays
// Set parent of pseudo element to position relative
@mixin gradient_setup {
  content: "";
  display: inline-block;
  height: 100%;
  overflow: hidden;
  position: absolute;
  top: 0;
  width: 100%;
}

// Transparent at the top.
@mixin hero_bottom_gradient($direction: to top, $color: $black) {
  background: transparent
    linear-gradient($direction, rgba($color, 1) 0%, rgba($color, 0) 30%);
  @include mq($md) {
    background: transparent
      linear-gradient(
        $direction,
        rgba($color, 1) 0%,
        rgba($color, 0.9) 10%,
        rgba($color, 0.8) 20%,
        rgba($color, 0.6) 35%,
        rgba($color, 0.2) 60%,
        rgba($color, 0) 100%
      );
  }
}

/* UTILITIES */

/* Accessibly hide - make visibly hidden.
Reference: https://www.drupal.org/docs/8/accessibility/hide-content-properly.*/
@mixin visually-hidden {
  clip: rect(1px, 1px, 1px, 1px);
  height: 1px;
  position: absolute !important;
  overflow: hidden;
  width: 1px;
  word-wrap: normal;
}

// Combine active, hover, and focus for accessibility purposes
@mixin hocus {
  &:active,
  &:hover,
  &:focus {
    @content;
  }
}

// Placeholder text
@mixin placeholder {
  $placeholders: ":-webkit-input" ":-moz" "-moz" "-ms-input";
  @each $placeholder in $placeholders {
    &:#{$placeholder}-placeholder {
      @content;
    }
  }
}

// Remove webkit appearance from form fields
@mixin form-foundation {
  -webkit-appearance: none;
  border: none;
  border-radius: 0;
  box-shadow: none;
}

// IE 10 and 11 Support
@mixin support-ie {
  @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
    @content;
  }

  @supports (-ms-ime-align: auto) {
    @content;
  }
}

@mixin elevate($level) {
  z-index: #{$level};
  box-shadow: 0 #{$level * 2}px #{$level * 2}px 0 rgba(0, 0, 0, 0.14),
    0 #{$level * 1}px #{$level * 5}px 0 rgba(0, 0, 0, 0.12),
    0 #{$level * 3}px #{$level * 1}px #{$level * -2}px rgba(0, 0, 0, 0.2);
}

/* UNIQUE TO PROJECT */
